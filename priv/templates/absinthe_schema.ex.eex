defmodule <%= Macro.camelize(app_name) %>.Schema do
  <%= if moduledoc do %>
    @moduledoc "<%= moduledoc %>"
  <% else %>
    @moduledoc false
  <% end %>
  use Absinthe.Schema

  alias <%= Macro.camelize(app_name) %>.Types
  alias <%= Macro.camelize(app_name) %>.Schema.{Mutations, Queries}

  # Types<%= for type_module <- types do %>
    import_types Types.<%= Macro.camelize(type_module) %><% end %>

  # Queries<%= for query <- queries do %>
    import_types Queries.<%= Macro.camelize(query) %><% end %>

  <%= if Enum.any?(mutations) do %>
  # Mutations<%= for mutation <- mutations do %>
    import_types Mutations.<%= Macro.camelize(mutation) %><% end %><% end %>

  query do
    <%= for query <- queries do %>
      import_fields :<%= Macro.underscore(query) %>_queries<% end %>
  end

  <%= if Enum.any?(mutations) do %>
    mutations do
      <%= for mutation <- mutations do %>
        import_fields :<%= Macro.underscore(mutation) %>_mutations<% end %>
    end
  <% end %>

  <%= if Enum.any?(subscriptions) do %>
    subscriptions do
      <%= for subscription <- subscriptions do %>
        import_fields :<%= Macro.underscore(subscription) %>_subscriptions<% end %>
    end
  <% end %>

  <%= if Enum.any?(data_sources) do %>
    def context(ctx) do
      loader = Dataloader.new()
      <%= for data_source <- data_sources do %>
          |> Dataloader.add_source(<%= Macro.camelize(data_source.source) %><%= if data_source.query do %>, <%= data_source.query %><% end %>)<% end %>
    end
  <% end %>

  <%= if Enum.any?(middleware.queries) do %>
    def middleware(middleware, _, %{identifier: :query}) do
      <%= if Enum.any?(middleware.queries.pre_middleware) do %> [<%= Enum.join(middleware.queries.pre_middleware, ",") %>] ++ <% end %>
      middleware
      <%= if Enum.any?(middleware.queries.post_middleware) do %> ++ [<%= Enum.join(middleware.queries.post_middleware, ",") %>] <% end %>
    end<% end %>

  <%= if Enum.any?(middleware.mutations) do %>
    def middleware(middleware, _, %{identifier: :mutation}) do
      <%= if Enum.any?(middleware.mutations.pre_middleware) do %> [<%= Enum.join(middleware.mutations.pre_middleware, ",") %>] ++ <% end %>
      middleware
      <%= if Enum.any?(middleware.mutations.post_middleware) do %> ++ [<%= Enum.join(middleware.mutations.post_middleware, ",") %>] <% end %>
    end <% end %>

  <%= if Enum.any?(middleware.subscriptions) do %>
  def middleware(middleware, _, %{identifier: :subscription}) do
    <%= if Enum.any?(middleware.subscriptions.pre_middleware) do %> [<%= Enum.join(middleware.subscriptions.pre_middleware, ",") %>] ++ <% end %>
    middleware
    <%= if Enum.any?(middleware.subscriptions.post_middleware) do %> ++ [<%= Enum.join(middleware.subscriptions.post_middleware, ",") %>] <% end %>
  end<% end %>

  <%= if Enum.any?(middleware.all) do %>
    def middleware(middleware, _, _) do
    <%= if Enum.any?(middleware.all.pre_middleware) do %> [<%= Enum.join(middleware.all.pre_middleware, ",") %>] ++ <% end %>
    middleware
    <%= if Enum.any?(middleware.all.post_middleware) do %> ++ [<%= Enum.join(middleware.all.post_middleware, ",") %>]<% end %>
    end
  <% else %>
    def middleware(middleware, _, _) do
      middleware
    end
  <% end %>

  def plugins do
    [Absinthe.Middleware.Dataloader | Absinthe.Plugin.defaults()]
  end
end
